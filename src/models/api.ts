/**
 * Generated by orval v6.14.3 üç∫
 * Do not edit manually.
 * Simulation API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'
import { useQuery } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query'
import type {
  GetProblem200Item,
  GetSimulation200,
  GetSimulationBody,
} from './api.schemas'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Get problem list
 */
export const getProblem = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProblem200Item[]>> => {
  return axios.get(`/problem`, options)
}

export const getGetProblemQueryKey = () => [`/problem`] as const

export const getGetProblemQueryOptions = <
  TData = Awaited<ReturnType<typeof getProblem>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getProblem>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseQueryOptions<Awaited<ReturnType<typeof getProblem>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetProblemQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProblem>>> = ({
    signal,
  }) => getProblem({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions }
}

export type GetProblemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProblem>>
>
export type GetProblemQueryError = AxiosError<void>

export const useGetProblem = <
  TData = Awaited<ReturnType<typeof getProblem>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getProblem>>, TError, TData>
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProblemQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get simulation result
 */
export const getSimulation = (
  getSimulationBody: GetSimulationBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetSimulation200>> => {
  return axios.get(`/simulation`, options)
}

export const getGetSimulationQueryKey = (
  getSimulationBody: GetSimulationBody
) => [`/simulation`, getSimulationBody] as const

export const getGetSimulationQueryOptions = <
  TData = Awaited<ReturnType<typeof getSimulation>>,
  TError = AxiosError<void>
>(
  getSimulationBody: GetSimulationBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSimulation>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryOptions<Awaited<ReturnType<typeof getSimulation>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSimulationQueryKey(getSimulationBody)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSimulation>>> = ({
    signal,
  }) => getSimulation(getSimulationBody, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions }
}

export type GetSimulationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSimulation>>
>
export type GetSimulationQueryError = AxiosError<void>

export const useGetSimulation = <
  TData = Awaited<ReturnType<typeof getSimulation>>,
  TError = AxiosError<void>
>(
  getSimulationBody: GetSimulationBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSimulation>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSimulationQueryOptions(getSimulationBody, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
